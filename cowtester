#!/bin/sh

#set -x

###
### set default parameters
###

REALPATH=$(cd $(dirname $0) && pwd)

MANIFEST_DIR="/etc/puppet"
PUPPET_ENV="production"
PUPPET_OPT="--confdir=${MANIFEST_DIR} --modulepath=${MANIFEST_DIR}/modules"
PUPPET_MASTERHOST=`facter fqdn`
PUPPET_APPLYMODE="apply"

CB_ROOT=/var/cache/pbuilder/base-puppet.cow
CB_DIST=squeeze
CB_ARCH=i386
CB_PROXY=""
CB_EXTRAPACKAGES=""
CB_HOSTS="/etc/hosts"

COLOR="true"
DEBUG=""

DEBUGCOUNT=0
TRYCOUNT=3

CONFLICT_SERVICES=""
NODE_LIST=`awk '/^node/{sub(/, /,"\nnode "); print }' ${MANIFEST_DIR}/manifests/*.pp 2>/dev/null | sort`

[ -f ./.cowtesterrc ] && . ./.cowtesterrc

NODE_MAX=`echo ${NODE_LIST} | wc -w`

###
### subroutine (common)
###

_usage() {
    echo >&2 "Usage: $0 [-cl] [-s] [-dmr] [-h NODE_NAME] [-n NODE_NUM]"
    echo >&2 "  -s   (server)  run puppet as daemon mode."
    echo >&2 "  -c   (create)  create cowbuilder basepath."
    echo >&2 "  -b   (base)    specyfy cowbuilder basepath."
    echo >&2 "  -l   (list)    list all recognized nodes."
    echo >&2 "  -d N (debug)   run debug shell after running puppet N times."
    echo >&2 "  -m   (mono)    disable colorized output."
    echo >&2 "  -f   (force)   skip syntax check."
    echo >&2 "  -r   (random)  choose target host at random."
    echo >&2 "  -h X (host)    choose target host by hostname."
    echo >&2 "  -n N (number)  choose target host by number (shown by -l)."
    echo >&2 "  -v   (verbose) make puppet verbose."
    echo >&2 "  -w   (vv)      make puppet more verbose."
    exit 1
}

_ifdefined() {

    local _FUNCNAME=$1
    case `type ${_FUNCNAME} | head -1` in
	*function)
            ${_FUNCNAME} ;;
    esac

}

_control_service() {
    local _ACTION=$1
    shift
    local _SERVICES="$*"

    if [ "z${_SERVICES}" != "z" ]; then
	for SVC in $@
	do
	    if [ -f /etc/init.d/${SVC} ]; then
		sudo /etc/init.d/${SVC} ${_ACTION}
	    fi
	done
    fi
}


###
### subroutine (inside)
###

_cowtester_run_breakpoint() {

    local COUNT=$1
    if [ "$DEBUGCOUNT" = "$COUNT" -o "$DEBUGCOUNT" = "all" ]; then
        echo "DEBUG: Entering shell after $COUNT execution. Please exit when finished." && /bin/bash
    fi

}

_cowtester_run_init() {

    [ -f /etc/hosts.cowtester ] && mv /etc/hosts.cowtester /etc/hosts
    rm -f /dev/initctl

    _ifdefined "setup"

} >/dev/null 2>&1

_cowtester_run_puppet_filter() {
    sed -e "s/^/Try $TIMES:/" | grep -v 'sestatus'
}

_cowtester_run_puppet_wrapper() {
    case $PUPPET_APPLYMODE in
        apply)
            puppet apply --detailed-exitcodes ${DEBUG} --color=${COLOR} \
		${PUPPET_OPT} \
		--environment=${PUPPET_ENV} ${MANIFEST_DIR}/manifests/site.pp 2>&1
            RC=$?
            ;;
	daemon)
            puppetd --onetime --test --server ${PUPPET_MASTERHOST} --environment ${PUPPET_ENV} \
		--detailed-exitcodes --pluginsync --color ${COLOR} ${DEBUG} 2>&1
	    RC=$?
            ;;
    esac

    if [ $RC -gt 3 ]; then
        RC=1
    else
        RC=0
    fi

    return $RC
}

_cowtester_run_puppet() {

    for TIMES in `seq $TRYCOUNT`
    do
        exec 3>&1
        RC=$({ { _cowtester_run_puppet_wrapper 3>&- 4>&-; echo $? 1>&4 3>&- 4>&-;} | _cowtester_run_puppet_filter 1>&3 3>&- 4>&-; } 4>&1)
        _cowtester_run_breakpoint $TIMES
    done
    return $RC
}

_cowtester_run_finalize() {
    local _EXCLUDE="`dpkg -L initscripts | awk -F / '/init.d\//{print $NF}' | xargs | sed -e 's/ /|/g' -e 's/\./\\./g'`|\.sh$|\.depend\.|README|^rc|udev|ifupdown|networking|console-setup|keyboard-setup|single|functions|halt"
    local _SERVICES="`ls /etc/init.d/ | egrep -v \'${_EXCLUDE}\'`"

    _control_service stop ${_SERVICES}

    _ifdefined "teardown"

} >/dev/null #2>&1

_cowtester_run() {
    _cowtester_run_init
    _cowtester_run_puppet
	RC=$?
    _cowtester_run_finalize

    exit $RC
}

###
### subroutine (outside)
###

_cowtester_create() {
    [ -d ${CB_ROOT} ] && echo "${CB_ROOT} already exists. abort."; exit 1
    sudo cowbuilder --create --distribution $CB_DIST --architecture $CB_ARCH \
        --basepath $CB_ROOT --http-proxy $CB_PROXY \
        --extrapackages "pciutils dmidecode facter ruby puppet eatmydata ${CB_EXTRAPACKAGES}"
    exit $?
}

_cowtester_setup() {
    export NEWHOST=`echo $TEST_NODE | awk -F . '{print $1}'`
    export NEWDOMAIN=`echo $TEST_NODE | sed -e "s/${NEWHOST}\.//"`

    sudo mkdir -p ${CB_ROOT}/${MANIFEST_DIR} && sudo rm -rf ${CB_ROOT}/${MANIFEST_DIR}/*
    sudo cp -pR ${MANIFEST_DIR}/* ${CB_ROOT}/${MANIFEST_DIR}
    sudo mkdir -p ${CB_ROOT}/${REALPATH}
    sudo cp ${REALPATH}/cowtester ${CB_ROOT}/${REALPATH}/cowtester
    sudo cp ${CB_HOSTS} ${CB_ROOT}/etc/hosts.cowtester
    sudo sh -c "cat >> ${CB_ROOT}/etc/hosts.cowtester <<EOF

`facter ipaddress` ${TEST_NODE} ${NEWHOST}
`facter ipaddress` `facter fqdn`
127.0.1.1       ${TEST_NODE} ${NEWHOST}

EOF"
    sudo sh -c "cat ./.cowtesterrc | sed -e \"s|^MANIFEST_DIR=\(.*\)$|MANIFEST_DIR=${MANIFEST_DIR}|\" > ${CB_ROOT}/.cowtesterrc"
    sudo sh -c "cat >> ${CB_ROOT}/.cowtesterrc <<EOF

TRYCOUNT=${TRYCOUNT}
DEBUGCOUNT=${DEBUGCOUNT}
COLOR=${COLOR}
DEBUG=${DEBUG}
PUPPET_APPLYMODE=${PUPPET_APPLYMODE}
PUPPET_MASTERHOST=${PUPPET_MASTERHOST}
EOF"
}

## run test
# http://mike.marineau.org/blog/code/2007-07-23-giving-chroot-its-own-hostname-chname
# http://code.google.com/p/chname/source/browse/trunk/chname.c
_cowtester_runtest() {
    _control_service stop ${CONFLICT_SERVICES}
    RC=0
    ( sudo ${REALPATH}/chname ${TEST_NODE} cowbuilder --execute \
        --basepath ${CB_ROOT} --extrapackages "ruby puppet eatmydata ${CB_EXTRAPACKAGES}" \
        ${REALPATH}/cowtester -- -i ) || RC=$?
    _control_service start ${CONFLICT_SERVICES}
    sudo rm -rf ${CB_ROOT}/${MANIFEST_DIR}/*
    sudo rm -f ${CB_ROOT}/.cowtesterrc ${CB_ROOT}/etc/hosts.cowtester ${CB_ROOT}/${REALPATH}/cowtester
	[ "${PUPPET_APPLYMODE}" = "daemon" ] && ( _control_service restart puppet; sudo puppet cert --clean ${TEST_NODE} --color ${COLOR} )
    return $RC
}

_randomize_host() {
    RAND=`echo $(( $( od -vAn -N1 -tu1 < /dev/urandom ) * ${NODE_MAX} / 255))`
#  TEST_NODE=`echo ${NODE_LIST} | awk "{print \\$$RAND}"`
    _choose_host $RAND "${NODE_LIST}"
}

_choose_host() {
#    TEST_NODE=`echo ${NODE_LIST} | awk "{print \\$$1}"`
    echo `echo $2 | awk "{print \\$$1}"`
}

_cowtester_validate() {
    [ z"${TEST_NODE}" = "z" ] && _usage
    if echo ${NODE_LIST} | grep -qF "${TEST_NODE}"; then
        echo "Test Target: ${TEST_NODE} (`basename ${CB_ROOT}`)"
    else
        echo "no such node."
        exit 1
    fi
}

_cowtester_pretest() {
    ${REALPATH}/puppet-lint || exit 1
    echo "PreTest OK."
}

_cowtester() {
    set -e
    _cowtester_validate
    _cowtester_setup
    ${_PRETEST}
    _cowtester_runtest
    return $?
}

###
### main
###

while getopts "sd:mfh:rb:n:vwlic" OPT; do
    case ${OPT} in
        s) PUPPET_APPLYMODE="daemon" ;;
        d) DEBUGCOUNT="${OPTARG}"; TRYCOUNT=$DEBUGCOUNT ;;
        m) COLOR="false" ;;
        f) _PRETEST="_cowtester_pretest" ;;
        h) TEST_NODE="${OPTARG}" ;;
        r) TEST_NODE=`_randomize_host` ;;
        b) CB_ROOT="${OPTARG}" ;;
        n) TEST_NODE=`_choose_host "${OPTARG}" "${NODE_LIST}"` ;;
        v) DEBUG="--debug" ;;
        w) DEBUG="--debug --trace" ;;
        l) echo ${NODE_LIST} | sed -e 's/ /\n/g' | cat -n ; exit 0 ;;
        \?) _usage ;;           # no return
        i) _cowtester_run ;;    # no return
        c) _cowtester_create ;; # no return
    esac
done
shift $(( ${OPTIND} - 1 ))

_cowtester

exit $?
